name: Export AdventureWorks Tables to CSV

on:
  workflow_dispatch:

jobs:
  export-tables:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download AdventureWorks2019.bak
      run: |
        curl -L -o AdventureWorks2019.bak https://github.com/Microsoft/sql-server-samples/releases/download/adventureworks/AdventureWorks2019.bak
        echo "Downloaded AdventureWorks2019.bak file. File details:"
        ls -lh AdventureWorks2019.bak

    - name: Start SQL Server container
      run: |
        docker pull mcr.microsoft.com/mssql/server:2019-latest
        docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=YourStrong!Passw0rd' -p 1433:1433 -d --name sqlserver --privileged --user root mcr.microsoft.com/mssql/server:2019-latest
        # Wait for SQL Server to be fully up and running
        for i in {1..20}; do
          if docker logs sqlserver 2>&1 | grep -q "SQL Server is now ready for client connections"; then
            echo "SQL Server is up and running"
            break
          fi
          echo "Waiting for SQL Server to start... ($i/20)"
          docker ps -a
          docker logs sqlserver
          sleep 5
        done
        if [ $i -eq 20 ]; then
          echo "SQL Server failed to start in time"
          docker ps -a
          docker logs sqlserver
          exit 1
        fi

    - name: Copy AdventureWorks2019.bak to container
      run: |
        docker cp $(pwd)/AdventureWorks2019.bak sqlserver:/AdventureWorks2019.bak
        echo "File copied. Checking file in container..."
        docker exec sqlserver ls -lh /AdventureWorks2019.bak
        docker exec sqlserver du -h /AdventureWorks2019.bak

    - name: Restore AdventureWorks2019 database
      run: |
        LOGICAL_DATA_NAME=$(docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "RESTORE FILELISTONLY FROM DISK = '/AdventureWorks2019.bak';" | awk '/AdventureWorks/ && /Data/ {print $1}')
        LOGICAL_LOG_NAME=$(docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "RESTORE FILELISTONLY FROM DISK = '/AdventureWorks2019.bak';" | awk '/AdventureWorks/ && /Log/ {print $1}')
        docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "RESTORE DATABASE AdventureWorks2019 FROM DISK = '/AdventureWorks2019.bak' WITH MOVE '$LOGICAL_DATA_NAME' TO '/var/opt/mssql/data/AdventureWorks2019.mdf', MOVE '$LOGICAL_LOG_NAME' TO '/var/opt/mssql/data/AdventureWorks2019_log.ldf';"

    - name: Export tables to CSV using BCP with headers
      run: |
        # Create the export directory within the container
        docker exec sqlserver mkdir -p /var/opt/mssql/csv_exports
        # Get the list of tables to export
        TABLE_NAMES=$(docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -d AdventureWorks2019 -Q "SET NOCOUNT ON; SELECT TABLE_SCHEMA + '.' + TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';" -h -1 | tail -n +3)
        # Export each table to CSV with headers
        for table in $TABLE_NAMES; do
          HEADER_QUERY="SET NOCOUNT ON; SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = PARSENAME('$table', 1) AND TABLE_SCHEMA = PARSENAME('$table', 2) ORDER BY ORDINAL_POSITION"
          HEADER=$(docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -d AdventureWorks2019 -Q "$HEADER_QUERY" -h -1 -W | tr '\n' ',' | sed 's/,$//')
          docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -d AdventureWorks2019 -Q "EXEC xp_cmdshell 'echo $HEADER > /var/opt/mssql/csv_exports/$(echo $table | tr '.' '_').csv && bcp \"SELECT * FROM $table\" queryout /var/opt/mssql/csv_exports/$(echo $table | tr '.' '_').csv -c -t, -S localhost -U sa -P YourStrong!Passw0rd -r \\n -t,'"
        done
        # Copy the csv_exports directory from the container to the host
        docker cp sqlserver:/var/opt/mssql/csv_exports $(pwd)/csv_exports

    - name: Upload CSV files
      uses: actions/upload-artifact@v2
      with:
        name: csv-exports
        path: csv_exports/
        if-no-files-found: warn
