name: Export AdventureWorks Tables to CSV

on:
  push:
    branches:
      - main

jobs:
  export-tables:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Check if AdventureWorks.bak exists
      run: |
        if [ ! -f $(pwd)/AdventureWorks.bak ]; then
          echo "AdventureWorks.bak file not found!"
          exit 1
        else
          echo "AdventureWorks.bak file found. File details:"
          ls -lh $(pwd)/AdventureWorks.bak
        fi

    - name: Start SQL Server container
      run: |
        docker pull mcr.microsoft.com/mssql/server:2019-latest
        docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=YourStrong!Passw0rd' -p 1433:1433 -d --name sqlserver --privileged --user root mcr.microsoft.com/mssql/server:2019-latest
        # Wait for SQL Server to be fully up and running
        for i in {1..20}; do
          if docker logs sqlserver 2>&1 | grep -q "SQL Server is now ready for client connections"; then
            echo "SQL Server is up and running"
            break
          fi
          echo "Waiting for SQL Server to start... ($i/20)"
          docker ps -a
          docker logs sqlserver
          sleep 5
        done
        if [ $i -eq 20 ]; then
          echo "SQL Server failed to start in time"
          docker ps -a
          docker logs sqlserver
          exit 1
        fi

    - name: Copy AdventureWorks.bak to container
      run: |
        docker cp $(pwd)/AdventureWorks.bak sqlserver:/AdventureWorks.bak
        echo "File copied. Checking file in container..."
        docker exec sqlserver ls -lh /AdventureWorks.bak
        docker exec sqlserver du -h /AdventureWorks.bak

    - name: Restore AdventureWorks database
      run: |
        LOGICAL_DATA_NAME=$(docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "RESTORE FILELISTONLY FROM DISK = '/AdventureWorks.bak';" | awk '/AdventureWorks/ && /Data/ {print $1}')
        LOGICAL_LOG_NAME=$(docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "RESTORE FILELISTONLY FROM DISK = '/AdventureWorks.bak';" | awk '/AdventureWorks/ && /Log/ {print $1}')
        docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "RESTORE DATABASE AdventureWorks FROM DISK = '/AdventureWorks.bak' WITH MOVE '$LOGICAL_DATA_NAME' TO '/var/opt/mssql/data/AdventureWorks.mdf', MOVE '$LOGICAL_LOG_NAME' TO '/var/opt/mssql/data/AdventureWorks_log.ldf';"

    - name: Export tables to CSV
      run: |
        # Create the export directory within the container
        docker exec sqlserver mkdir -p /csv_exports
        # Get the list of tables to export
        TABLE_NAMES=$(docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P 'YourStrong!Passw0rd' -Q "SET NOCOUNT ON; SELECT TABLE_NAME FROM AdventureWorks.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';" -h -1 | tail -n +3)
        # Export each table to CSV
        for table in $TABLE_NAMES; do
          docker exec sqlserver /opt/mssql-tools/bin/bcp AdventureWorks..$table out /csv_exports/$table.csv -c -t, -S localhost -U sa -P 'YourStrong!Passw0rd'
          docker cp sqlserver:/csv_exports/$table.csv csv_exports/
        done

    - name: Upload CSV files
      uses: actions/upload-artifact@v2
      with:
        name: csv-exports
        path: csv_exports/
        if-no-files-found: warn
