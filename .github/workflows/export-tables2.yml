name: Export AdventureWorks Tables to CSV

on:
  workflow_dispatch:

jobs:
  export-tables:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Check .bak file exists
      run: |
        if [ ! -f $(pwd)/AdventureWorks.bak ]; then
          echo "AdventureWorks.bak file not found!"
          exit 1
        else
          echo "AdventureWorks.bak file found. File details:"
          ls -lh $(pwd)/AdventureWorks.bak
        fi

    - name: Set up SQL Server
      run: |
        docker pull mcr.microsoft.com/mssql/server:2019-latest
        docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=${{ secrets.SA_PASSWORD }}' -p 1433:1433 -d --name sqlserver --privileged --user root mcr.microsoft.com/mssql/server:2019-latest
        # Wait for SQL Server to be fully up and running
        for i in {1..10}; do
          if docker logs sqlserver 2>&1 | grep -q "SQL Server is now ready for client connections"; then
            echo "SQL Server is up and running"
            break
          fi
          echo "Waiting for SQL Server to start... ($i/10)"
          docker ps -a
          docker logs sqlserver
          sleep 5
        done
        if [ $i -eq 10 ]; then
          echo "SQL Server failed to start in time"
          docker ps -a
          docker logs sqlserver
          exit 1
        fi

    - name: Copy AdventureWorks.bak to SQL Server container
      run: docker cp $(pwd)/AdventureWorks.bak sqlserver:/AdventureWorks.bak

    - name: Restore AdventureWorks Database
      run: |
        docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${{ secrets.SA_PASSWORD }} -Q "RESTORE DATABASE AdventureWorks FROM DISK = '/AdventureWorks.bak' WITH MOVE 'AdventureWorks_Data' TO '/var/opt/mssql/data/AdventureWorks.mdf', MOVE 'AdventureWorks_Log' TO '/var/opt/mssql/data/AdventureWorks_log.ldf';"
      env:
        SA_PASSWORD: ${{ secrets.SA_PASSWORD }}

    - name: Export Tables to CSV
      run: |
        mkdir -p csv_exports
        docker exec sqlserver /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${{ secrets.SA_PASSWORD }} -d AdventureWorks -Q "SET NOCOUNT ON; DECLARE @tablename AS NVARCHAR(500); DECLARE table_cursor CURSOR FOR SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'; OPEN table_cursor; FETCH NEXT FROM table_cursor INTO @tablename; WHILE @@FETCH_STATUS = 0 BEGIN DECLARE @sql AS NVARCHAR(1000); SET @sql = 'bcp AdventureWorks.' + @tablename + ' out /csv_exports/' + @tablename + '.csv -c -t, -S localhost -U sa -P ' + '${{ secrets.SA_PASSWORD }}'; EXEC xp_cmdshell @sql; FETCH NEXT FROM table_cursor INTO @tablename; END; CLOSE table_cursor; DEALLOCATE table_cursor;"
        docker cp sqlserver:/csv_exports $(pwd)/csv_exports
      env:
        SA_PASSWORD: ${{ secrets.SA_PASSWORD }}

    - name: Upload CSV files
      uses: actions/upload-artifact@v2
      with:
        name: csv-exports
        path: csv_exports/
